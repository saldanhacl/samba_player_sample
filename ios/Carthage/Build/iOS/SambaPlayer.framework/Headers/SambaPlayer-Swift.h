#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import GoogleCast;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SambaPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC11SambaPlayer12DownloadData")
@interface DownloadData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SambaPlayer13DownloadState")
@interface DownloadState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Represents a DRM validation request
SWIFT_CLASS("_TtC11SambaPlayer10DrmRequest")
@interface DrmRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface NSNotification (SWIFT_EXTENSION(SambaPlayer))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull SambaDownloadStateChanged;)
+ (NSNotificationName _Nonnull)SambaDownloadStateChanged SWIFT_WARN_UNUSED_RESULT;
@end

@class SambaMediaRequest;
@class SambaMedia;
@class NSURLResponse;

/// Manages media data requests
SWIFT_CLASS("_TtC11SambaPlayer8SambaApi")
@interface SambaApi : NSObject
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Requests and decodes a Base64 media data from the Samba Player API
/// \param request The request to the API
///
/// \param onComplete The callback when the request completes that brings the media object to use with the player
///
- (void)requestMedia:(SambaMediaRequest * _Nonnull)request onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete;
- (void)prepareOfflineMediaWithMedia:(SambaMedia * _Nonnull)media onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete onError:(void (^ _Nonnull)(NSError * _Nullable, NSURLResponse * _Nullable))onError;
/// Requests and decodes a Base64 media data from the Samba Player API
/// \param request The request to the API
///
/// \param onComplete The callback when the request completes that brings the media object to use with the player
///
/// \param onError The callback for any error during the API request
///
- (void)requestMedia:(SambaMediaRequest * _Nonnull)request onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete onError:(void (^ _Nullable)(NSError * _Nullable, NSURLResponse * _Nullable))onError;
@end

@protocol SambaCastDelegate;
@class SambaCastButton;
enum SambaCastCompletionType : NSInteger;

SWIFT_CLASS("_TtC11SambaPlayer9SambaCast")
@interface SambaCast : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SambaCast * _Nonnull sharedInstance;)
+ (SambaCast * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(SambaCast * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)subscribeWithDelegate:(id <SambaCastDelegate> _Nonnull)delegate;
- (void)unSubscribeWithDelegate:(id <SambaCastDelegate> _Nonnull)delegate;
- (void)config;
- (BOOL)isCasting SWIFT_WARN_UNUSED_RESULT;
- (void)presentCastInstructionWith:(SambaCastButton * _Nonnull)button;
- (void)stopCasting;
- (void)loadMediaWith:(SambaMedia * _Nonnull)media currentTime:(long)currentTime captionTheme:(NSString * _Nullable)captionTheme completion:(void (^ _Nonnull)(enum SambaCastCompletionType, NSError * _Nullable))completion;
@end


@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKLoggerDelegate>
- (void)logMessage:(NSString * _Nonnull)message fromFunction:(NSString * _Nonnull)function;
@end

@class GCKUIImageHints;
@class GCKMediaMetadata;
@class GCKImage;

@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKUIImagePicker>
- (GCKImage * _Nullable)getImageWithHints:(GCKUIImageHints * _Nonnull)imageHints fromMetadata:(GCKMediaMetadata * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
@end



@class GCKSessionManager;
@class GCKSession;

@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKSessionManagerListener>
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didStartSession:(GCKSession * _Nonnull)session;
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didResumeSession:(GCKSession * _Nonnull)session;
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didEndSession:(GCKSession * _Nonnull)session withError:(NSError * _Nullable)error;
@end

@class NSCoder;

SWIFT_CLASS("_TtC11SambaPlayer15SambaCastButton")
@interface SambaCastButton : GCKUICastButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SambaCastCompletionType, closed) {
  SambaCastCompletionTypeLoaded = 0,
  SambaCastCompletionTypeResumed = 1,
  SambaCastCompletionTypeError = 2,
};


SWIFT_PROTOCOL("_TtP11SambaPlayer17SambaCastDelegate_")
@protocol SambaCastDelegate
@optional
- (void)onCastConnected;
- (void)onCastResumed;
- (void)onCastDisconnected;
- (void)onCastPlay;
- (void)onCastPause;
- (void)onCastProgressWithPosition:(long)position duration:(long)duration;
- (void)onCastFinish;
@end

@class SambaDownloadRequest;

SWIFT_CLASS("_TtC11SambaPlayer20SambaDownloadManager")
@interface SambaDownloadManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SambaDownloadManager * _Nonnull sharedInstance;)
+ (SambaDownloadManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(SambaDownloadManager * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)config;
- (void)configWithMaximumDurationTimeForLicensesOfProtectedContentInMinutes:(NSInteger)time;
- (void)prepareDownloadWith:(SambaDownloadRequest * _Nonnull)request successCallback:(void (^ _Nonnull)(SambaDownloadRequest * _Nonnull))successCallback errorCallback:(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nonnull))errorCallback;
- (void)performDownloadWith:(SambaDownloadRequest * _Nonnull)request;
- (BOOL)isDownloading:(NSString * _Nonnull)mediaID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDownloaded:(NSString * _Nonnull)mediaID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPaused:(NSString * _Nonnull)mediaId SWIFT_WARN_UNUSED_RESULT;
- (void)cancelDownloadFor:(NSString * _Nonnull)mediaId;
- (void)deleteMediaFor:(NSString * _Nonnull)mediaId;
- (void)deleteAllMedias;
- (void)cancelAllDownloads;
- (void)pauseDownloadFor:(NSString * _Nonnull)mediaId;
- (void)resumeDownloadFor:(NSString * _Nonnull)mediaId;
- (void)pauseAllDownloads;
- (void)resumeAllDownloads;
- (SambaMedia * _Nullable)getDownloadedMediaFor:(NSString * _Nonnull)mediaId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SambaMedia *> * _Nonnull)getAllDownloadedMedia SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11SambaPlayer20SambaDownloadRequest")
@interface SambaDownloadRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Samba Player API environment list
typedef SWIFT_ENUM(NSInteger, SambaEnvironment, closed) {
/// Production environment
  SambaEnvironmentProd = 0,
/// Staging environment
  SambaEnvironmentStaging = 1,
/// Development/Testing environment
  SambaEnvironmentTest = 2,
/// Local environment
  SambaEnvironmentLocal = 3,
};

@class UIImage;

/// Data entity representing a media
/// If <code>outputs</code> field is nil, <code>url</code> field will be used instead.
SWIFT_CLASS("_TtC11SambaPlayer10SambaMedia")
@interface SambaMedia : NSObject
/// Description of the media (returns media’s title when empty)
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Basic initializer
/// \param url URL of the media
///
/// \param title Media’s title
///
/// \param thumb URL of the thumb
///
- (nonnull instancetype)init:(NSString * _Nonnull)url title:(NSString * _Nullable)title thumb:(UIImage * _Nullable)thumb OBJC_DESIGNATED_INITIALIZER;
/// Clone initializer
/// \param media Another media object to create a clone
///
- (nonnull instancetype)initWithMedia:(SambaMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
@end


/// Caption entity
SWIFT_CLASS("_TtC11SambaPlayer17SambaMediaCaption")
@interface SambaMediaCaption : NSObject
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url label:(NSString * _Nonnull)label language:(NSString * _Nonnull)language cc:(BOOL)cc isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Configuration for captions
SWIFT_CLASS("_TtC11SambaPlayer24SambaMediaCaptionsConfig")
@interface SambaMediaCaptionsConfig : NSObject
- (nonnull instancetype)initWithColor:(NSUInteger)color size:(NSInteger)size language:(NSString * _Nullable)language OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     Internal extension of the media entity for player/plugins config purposes.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC11SambaPlayer16SambaMediaConfig")
@interface SambaMediaConfig : SambaMedia
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Clone initializer
/// \param media The ID of the media
///
- (nonnull instancetype)initWithMedia:(SambaMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)url title:(NSString * _Nullable)title thumb:(UIImage * _Nullable)thumb SWIFT_UNAVAILABLE;
@end


/// Output entity
SWIFT_CLASS("_TtC11SambaPlayer16SambaMediaOutput")
@interface SambaMediaOutput : NSObject
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url label:(NSString * _Nonnull)label isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Data entity that represents a media request to the Samba Player API
SWIFT_CLASS("_TtC11SambaPlayer17SambaMediaRequest")
@interface SambaMediaRequest : NSObject
/// Live initializer (by URL)
/// \param projectHash The project hash the media belongs to
///
/// \param streamUrl URL for live content
///
/// \param backupUrls Optional URL list for backup/fallback purposes
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamUrl:(NSString * _Nonnull)streamUrl backupUrls:(NSArray<NSString *> * _Nullable)backupUrls OBJC_DESIGNATED_INITIALIZER;
/// Convenience constructor, please refer to its original version.
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamUrl:(NSString * _Nonnull)streamUrl;
/// Live initializer (by URL + audio option)
/// \param projectHash The project hash the media belongs to
///
/// \param isLiveAudio Whether the media is both live and audio
///
/// \param streamUrl URL for live content
///
/// \param backupUrls Optional URL list for backup/fallback purposes
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash isLiveAudio:(BOOL)isLiveAudio streamUrl:(NSString * _Nonnull)streamUrl backupUrls:(NSArray<NSString *> * _Nullable)backupUrls OBJC_DESIGNATED_INITIALIZER;
/// Live initializer (by stream name)
/// \param projectHash The project hash the media belongs to
///
/// \param streamName Name of the media stream for live content
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamName:(NSString * _Nonnull)streamName OBJC_DESIGNATED_INITIALIZER;
/// VoD initializer
/// \param projectHash The project hash the media belongs to
///
/// \param mediaId The ID of the media
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash mediaId:(NSString * _Nonnull)mediaId OBJC_DESIGNATED_INITIALIZER;
/// Live initializer
/// \param projectHash The project hash the media belongs to
///
/// \param liveChannelId The ID of the live channel
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash liveChannelId:(NSString * _Nonnull)liveChannelId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol SambaPlayerDelegate;
@class UIView;
@class SambaPlayerError;
enum SambaPlayerControls : NSInteger;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

/// Responsible for managing media playback
SWIFT_CLASS("_TtC11SambaPlayer11SambaPlayer")
@interface SambaPlayer : UIViewController <SambaCastDelegate>
- (void)onCastConnected;
- (void)onCastResumed;
- (void)onCastDisconnected;
- (void)onCastProgressWithPosition:(long)position duration:(long)duration;
/// Stores the delegated methods for the player events
@property (nonatomic, strong) id <SambaPlayerDelegate> _Nonnull delegate;
- (void)unsubscribeDelegate:(id <SambaPlayerDelegate> _Nonnull)delegate;
/// Current media time
@property (nonatomic, readonly) float currentTime;
/// Current media duration
@property (nonatomic, readonly) float duration;
/// Current media
@property (nonatomic, strong) SambaMedia * _Nonnull media;
/// Whether media is playing or not
@property (nonatomic, readonly) BOOL isPlaying;
/// Whether controls should be visible or not
@property (nonatomic) BOOL controlsVisible;
/// Whether player shoud be fullscreen or not
@property (nonatomic) BOOL fullscreen;
/// Sets playback speed (values can vary from -1 to 2)
@property (nonatomic) float rate;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer
/// \param parentViewController The view-controller in which the player view-controller and view should be embedded
///
- (nonnull instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController;
/// Convenience initializer
/// \param parentViewController The view-controller in which the player view-controller should be embedded
///
/// \param parentView The view in which the player view should be embedded
///
- (nonnull instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController andParentView:(UIView * _Nonnull)parentView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Plays the media
- (void)play;
/// Pauses the media
- (void)pause;
/// Stops the media returning it to its initial time
- (void)stop;
/// Moves the media to a given time
/// \code
/// player.seek(20)
///
/// \endcode\param pos Time in seconds
///
- (void)seek:(float)pos;
/// Changes the current output
/// \code
/// player.switchOutput(1)
///
/// \endcode\param value Index of the output, -1 for auto switch.
///
- (void)switchOutput:(NSInteger)value;
/// Changes the current caption
/// \code
/// player.changeCaption(1)
///
/// \endcode\param value Index of the caption
///
- (void)changeCaption:(NSInteger)value;
/// Destroys the player instance
/// \code
/// player.destroy()
///
/// \endcode\param error (optional) Error type to show
///
- (void)destroyWithError:(SambaPlayerError * _Nullable)error;
- (void)hide:(enum SambaPlayerControls)control;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, SambaPlayerControls, closed) {
  SambaPlayerControlsPlay = 0,
  SambaPlayerControlsPlayLarge = 1,
  SambaPlayerControlsFullscreen = 2,
  SambaPlayerControlsSeekbar = 3,
  SambaPlayerControlsTopBar = 4,
  SambaPlayerControlsBottomBar = 5,
  SambaPlayerControlsTime = 6,
  SambaPlayerControlsMenu = 7,
  SambaPlayerControlsLiveIcon = 8,
};


/// Listens to player events
SWIFT_PROTOCOL("_TtP11SambaPlayer19SambaPlayerDelegate_")
@protocol SambaPlayerDelegate
@optional
/// Fired up when player is loaded
- (void)onLoad;
/// Fired up when player is started
- (void)onStart;
/// Fired up when player is resumed ( from paused to play )
- (void)onResume;
/// Fired up when player is paused
- (void)onPause;
/// Fired up when player is playing ( fired each second of playing )
- (void)onProgress;
/// Fired up when player is finished
- (void)onFinish;
/// Fired up when player is reset
- (void)onReset;
/// Fired up when player is destroyed
- (void)onDestroy;
/// Fired up when some error occurs
- (void)onError:(SambaPlayerError * _Nonnull)error;
@end

enum SambaPlayerErrorCriticality : NSInteger;
@class NSError;

/// Player error list
SWIFT_CLASS("_TtC11SambaPlayer16SambaPlayerError")
@interface SambaPlayerError : NSObject
/// URL format is invalid
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull invalidUrl;)
+ (SambaPlayerError * _Nonnull)invalidUrl SWIFT_WARN_UNUSED_RESULT;
/// Some error occurred when creating internal player
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull creatingPlayer;)
+ (SambaPlayerError * _Nonnull)creatingPlayer SWIFT_WARN_UNUSED_RESULT;
/// Trying to play a secure media on a rooted device
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull rootedDevice;)
+ (SambaPlayerError * _Nonnull)rootedDevice SWIFT_WARN_UNUSED_RESULT;
/// Trying to access an internal player instance that’s not loaded yet
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull playerNotLoaded;)
+ (SambaPlayerError * _Nonnull)playerNotLoaded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull drmNotPermition;)
+ (SambaPlayerError * _Nonnull)drmNotPermition SWIFT_WARN_UNUSED_RESULT;
/// Unknown error
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull unknown;)
+ (SambaPlayerError * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
/// The error code
@property (nonatomic, readonly) NSInteger code;
/// Whether error should destroy player or not
@property (nonatomic) enum SambaPlayerErrorCriticality criticality;
/// The error message
@property (nonatomic, copy) NSString * _Nonnull message;
/// The error cause
@property (nonatomic, strong) NSError * _Nullable cause;
/// Creates a new error entity
/// \param code The error code
///
/// \param message The error message
///
/// \param critical Whether error should destroy player or not
///
/// \param cause The error cause
///
- (nonnull instancetype)init:(NSInteger)code :(NSString * _Nonnull)message :(enum SambaPlayerErrorCriticality)criticality :(NSError * _Nullable)cause OBJC_DESIGNATED_INITIALIZER;
/// Retrieves the error description
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Defines the criticality of an error, whether to destroy the player or not.
typedef SWIFT_ENUM(NSInteger, SambaPlayerErrorCriticality, closed) {
  SambaPlayerErrorCriticalityMinor = 0,
  SambaPlayerErrorCriticalityInfo = 1,
  SambaPlayerErrorCriticalityRecoverable = 2,
  SambaPlayerErrorCriticalityCritical = 3,
};


SWIFT_CLASS("_TtC11SambaPlayer13SambaSubtitle")
@interface SambaSubtitle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SambaPlayer10SambaTrack")
@interface SambaTrack : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import GoogleCast;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SambaPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC11SambaPlayer12DownloadData")
@interface DownloadData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SambaPlayer13DownloadState")
@interface DownloadState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Represents a DRM validation request
SWIFT_CLASS("_TtC11SambaPlayer10DrmRequest")
@interface DrmRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface NSNotification (SWIFT_EXTENSION(SambaPlayer))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull SambaDownloadStateChanged;)
+ (NSNotificationName _Nonnull)SambaDownloadStateChanged SWIFT_WARN_UNUSED_RESULT;
@end

@class SambaMediaRequest;
@class SambaMedia;
@class NSURLResponse;

/// Manages media data requests
SWIFT_CLASS("_TtC11SambaPlayer8SambaApi")
@interface SambaApi : NSObject
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Requests and decodes a Base64 media data from the Samba Player API
/// \param request The request to the API
///
/// \param onComplete The callback when the request completes that brings the media object to use with the player
///
- (void)requestMedia:(SambaMediaRequest * _Nonnull)request onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete;
- (void)prepareOfflineMediaWithMedia:(SambaMedia * _Nonnull)media onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete onError:(void (^ _Nonnull)(NSError * _Nullable, NSURLResponse * _Nullable))onError;
/// Requests and decodes a Base64 media data from the Samba Player API
/// \param request The request to the API
///
/// \param onComplete The callback when the request completes that brings the media object to use with the player
///
/// \param onError The callback for any error during the API request
///
- (void)requestMedia:(SambaMediaRequest * _Nonnull)request onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete onError:(void (^ _Nullable)(NSError * _Nullable, NSURLResponse * _Nullable))onError;
@end

@protocol SambaCastDelegate;
@class SambaCastButton;
enum SambaCastCompletionType : NSInteger;

SWIFT_CLASS("_TtC11SambaPlayer9SambaCast")
@interface SambaCast : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SambaCast * _Nonnull sharedInstance;)
+ (SambaCast * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(SambaCast * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)subscribeWithDelegate:(id <SambaCastDelegate> _Nonnull)delegate;
- (void)unSubscribeWithDelegate:(id <SambaCastDelegate> _Nonnull)delegate;
- (void)config;
- (BOOL)isCasting SWIFT_WARN_UNUSED_RESULT;
- (void)presentCastInstructionWith:(SambaCastButton * _Nonnull)button;
- (void)stopCasting;
- (void)loadMediaWith:(SambaMedia * _Nonnull)media currentTime:(long)currentTime captionTheme:(NSString * _Nullable)captionTheme completion:(void (^ _Nonnull)(enum SambaCastCompletionType, NSError * _Nullable))completion;
@end


@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKLoggerDelegate>
- (void)logMessage:(NSString * _Nonnull)message fromFunction:(NSString * _Nonnull)function;
@end

@class GCKUIImageHints;
@class GCKMediaMetadata;
@class GCKImage;

@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKUIImagePicker>
- (GCKImage * _Nullable)getImageWithHints:(GCKUIImageHints * _Nonnull)imageHints fromMetadata:(GCKMediaMetadata * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
@end



@class GCKSessionManager;
@class GCKSession;

@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKSessionManagerListener>
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didStartSession:(GCKSession * _Nonnull)session;
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didResumeSession:(GCKSession * _Nonnull)session;
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didEndSession:(GCKSession * _Nonnull)session withError:(NSError * _Nullable)error;
@end

@class NSCoder;

SWIFT_CLASS("_TtC11SambaPlayer15SambaCastButton")
@interface SambaCastButton : GCKUICastButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SambaCastCompletionType, closed) {
  SambaCastCompletionTypeLoaded = 0,
  SambaCastCompletionTypeResumed = 1,
  SambaCastCompletionTypeError = 2,
};


SWIFT_PROTOCOL("_TtP11SambaPlayer17SambaCastDelegate_")
@protocol SambaCastDelegate
@optional
- (void)onCastConnected;
- (void)onCastResumed;
- (void)onCastDisconnected;
- (void)onCastPlay;
- (void)onCastPause;
- (void)onCastProgressWithPosition:(long)position duration:(long)duration;
- (void)onCastFinish;
@end

@class SambaDownloadRequest;

SWIFT_CLASS("_TtC11SambaPlayer20SambaDownloadManager")
@interface SambaDownloadManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SambaDownloadManager * _Nonnull sharedInstance;)
+ (SambaDownloadManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(SambaDownloadManager * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)config;
- (void)configWithMaximumDurationTimeForLicensesOfProtectedContentInMinutes:(NSInteger)time;
- (void)prepareDownloadWith:(SambaDownloadRequest * _Nonnull)request successCallback:(void (^ _Nonnull)(SambaDownloadRequest * _Nonnull))successCallback errorCallback:(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nonnull))errorCallback;
- (void)performDownloadWith:(SambaDownloadRequest * _Nonnull)request;
- (BOOL)isDownloading:(NSString * _Nonnull)mediaID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDownloaded:(NSString * _Nonnull)mediaID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPaused:(NSString * _Nonnull)mediaId SWIFT_WARN_UNUSED_RESULT;
- (void)cancelDownloadFor:(NSString * _Nonnull)mediaId;
- (void)deleteMediaFor:(NSString * _Nonnull)mediaId;
- (void)deleteAllMedias;
- (void)cancelAllDownloads;
- (void)pauseDownloadFor:(NSString * _Nonnull)mediaId;
- (void)resumeDownloadFor:(NSString * _Nonnull)mediaId;
- (void)pauseAllDownloads;
- (void)resumeAllDownloads;
- (SambaMedia * _Nullable)getDownloadedMediaFor:(NSString * _Nonnull)mediaId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SambaMedia *> * _Nonnull)getAllDownloadedMedia SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11SambaPlayer20SambaDownloadRequest")
@interface SambaDownloadRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Samba Player API environment list
typedef SWIFT_ENUM(NSInteger, SambaEnvironment, closed) {
/// Production environment
  SambaEnvironmentProd = 0,
/// Staging environment
  SambaEnvironmentStaging = 1,
/// Development/Testing environment
  SambaEnvironmentTest = 2,
/// Local environment
  SambaEnvironmentLocal = 3,
};

@class UIImage;

/// Data entity representing a media
/// If <code>outputs</code> field is nil, <code>url</code> field will be used instead.
SWIFT_CLASS("_TtC11SambaPlayer10SambaMedia")
@interface SambaMedia : NSObject
/// Description of the media (returns media’s title when empty)
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Basic initializer
/// \param url URL of the media
///
/// \param title Media’s title
///
/// \param thumb URL of the thumb
///
- (nonnull instancetype)init:(NSString * _Nonnull)url title:(NSString * _Nullable)title thumb:(UIImage * _Nullable)thumb OBJC_DESIGNATED_INITIALIZER;
/// Clone initializer
/// \param media Another media object to create a clone
///
- (nonnull instancetype)initWithMedia:(SambaMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
@end


/// Caption entity
SWIFT_CLASS("_TtC11SambaPlayer17SambaMediaCaption")
@interface SambaMediaCaption : NSObject
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url label:(NSString * _Nonnull)label language:(NSString * _Nonnull)language cc:(BOOL)cc isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Configuration for captions
SWIFT_CLASS("_TtC11SambaPlayer24SambaMediaCaptionsConfig")
@interface SambaMediaCaptionsConfig : NSObject
- (nonnull instancetype)initWithColor:(NSUInteger)color size:(NSInteger)size language:(NSString * _Nullable)language OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     Internal extension of the media entity for player/plugins config purposes.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC11SambaPlayer16SambaMediaConfig")
@interface SambaMediaConfig : SambaMedia
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Clone initializer
/// \param media The ID of the media
///
- (nonnull instancetype)initWithMedia:(SambaMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)url title:(NSString * _Nullable)title thumb:(UIImage * _Nullable)thumb SWIFT_UNAVAILABLE;
@end


/// Output entity
SWIFT_CLASS("_TtC11SambaPlayer16SambaMediaOutput")
@interface SambaMediaOutput : NSObject
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url label:(NSString * _Nonnull)label isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Data entity that represents a media request to the Samba Player API
SWIFT_CLASS("_TtC11SambaPlayer17SambaMediaRequest")
@interface SambaMediaRequest : NSObject
/// Live initializer (by URL)
/// \param projectHash The project hash the media belongs to
///
/// \param streamUrl URL for live content
///
/// \param backupUrls Optional URL list for backup/fallback purposes
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamUrl:(NSString * _Nonnull)streamUrl backupUrls:(NSArray<NSString *> * _Nullable)backupUrls OBJC_DESIGNATED_INITIALIZER;
/// Convenience constructor, please refer to its original version.
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamUrl:(NSString * _Nonnull)streamUrl;
/// Live initializer (by URL + audio option)
/// \param projectHash The project hash the media belongs to
///
/// \param isLiveAudio Whether the media is both live and audio
///
/// \param streamUrl URL for live content
///
/// \param backupUrls Optional URL list for backup/fallback purposes
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash isLiveAudio:(BOOL)isLiveAudio streamUrl:(NSString * _Nonnull)streamUrl backupUrls:(NSArray<NSString *> * _Nullable)backupUrls OBJC_DESIGNATED_INITIALIZER;
/// Live initializer (by stream name)
/// \param projectHash The project hash the media belongs to
///
/// \param streamName Name of the media stream for live content
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamName:(NSString * _Nonnull)streamName OBJC_DESIGNATED_INITIALIZER;
/// VoD initializer
/// \param projectHash The project hash the media belongs to
///
/// \param mediaId The ID of the media
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash mediaId:(NSString * _Nonnull)mediaId OBJC_DESIGNATED_INITIALIZER;
/// Live initializer
/// \param projectHash The project hash the media belongs to
///
/// \param liveChannelId The ID of the live channel
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash liveChannelId:(NSString * _Nonnull)liveChannelId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol SambaPlayerDelegate;
@class UIView;
@class SambaPlayerError;
enum SambaPlayerControls : NSInteger;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

/// Responsible for managing media playback
SWIFT_CLASS("_TtC11SambaPlayer11SambaPlayer")
@interface SambaPlayer : UIViewController <SambaCastDelegate>
- (void)onCastConnected;
- (void)onCastResumed;
- (void)onCastDisconnected;
- (void)onCastProgressWithPosition:(long)position duration:(long)duration;
/// Stores the delegated methods for the player events
@property (nonatomic, strong) id <SambaPlayerDelegate> _Nonnull delegate;
- (void)unsubscribeDelegate:(id <SambaPlayerDelegate> _Nonnull)delegate;
/// Current media time
@property (nonatomic, readonly) float currentTime;
/// Current media duration
@property (nonatomic, readonly) float duration;
/// Current media
@property (nonatomic, strong) SambaMedia * _Nonnull media;
/// Whether media is playing or not
@property (nonatomic, readonly) BOOL isPlaying;
/// Whether controls should be visible or not
@property (nonatomic) BOOL controlsVisible;
/// Whether player shoud be fullscreen or not
@property (nonatomic) BOOL fullscreen;
/// Sets playback speed (values can vary from -1 to 2)
@property (nonatomic) float rate;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer
/// \param parentViewController The view-controller in which the player view-controller and view should be embedded
///
- (nonnull instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController;
/// Convenience initializer
/// \param parentViewController The view-controller in which the player view-controller should be embedded
///
/// \param parentView The view in which the player view should be embedded
///
- (nonnull instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController andParentView:(UIView * _Nonnull)parentView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Plays the media
- (void)play;
/// Pauses the media
- (void)pause;
/// Stops the media returning it to its initial time
- (void)stop;
/// Moves the media to a given time
/// \code
/// player.seek(20)
///
/// \endcode\param pos Time in seconds
///
- (void)seek:(float)pos;
/// Changes the current output
/// \code
/// player.switchOutput(1)
///
/// \endcode\param value Index of the output, -1 for auto switch.
///
- (void)switchOutput:(NSInteger)value;
/// Changes the current caption
/// \code
/// player.changeCaption(1)
///
/// \endcode\param value Index of the caption
///
- (void)changeCaption:(NSInteger)value;
/// Destroys the player instance
/// \code
/// player.destroy()
///
/// \endcode\param error (optional) Error type to show
///
- (void)destroyWithError:(SambaPlayerError * _Nullable)error;
- (void)hide:(enum SambaPlayerControls)control;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, SambaPlayerControls, closed) {
  SambaPlayerControlsPlay = 0,
  SambaPlayerControlsPlayLarge = 1,
  SambaPlayerControlsFullscreen = 2,
  SambaPlayerControlsSeekbar = 3,
  SambaPlayerControlsTopBar = 4,
  SambaPlayerControlsBottomBar = 5,
  SambaPlayerControlsTime = 6,
  SambaPlayerControlsMenu = 7,
  SambaPlayerControlsLiveIcon = 8,
};


/// Listens to player events
SWIFT_PROTOCOL("_TtP11SambaPlayer19SambaPlayerDelegate_")
@protocol SambaPlayerDelegate
@optional
/// Fired up when player is loaded
- (void)onLoad;
/// Fired up when player is started
- (void)onStart;
/// Fired up when player is resumed ( from paused to play )
- (void)onResume;
/// Fired up when player is paused
- (void)onPause;
/// Fired up when player is playing ( fired each second of playing )
- (void)onProgress;
/// Fired up when player is finished
- (void)onFinish;
/// Fired up when player is reset
- (void)onReset;
/// Fired up when player is destroyed
- (void)onDestroy;
/// Fired up when some error occurs
- (void)onError:(SambaPlayerError * _Nonnull)error;
@end

enum SambaPlayerErrorCriticality : NSInteger;
@class NSError;

/// Player error list
SWIFT_CLASS("_TtC11SambaPlayer16SambaPlayerError")
@interface SambaPlayerError : NSObject
/// URL format is invalid
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull invalidUrl;)
+ (SambaPlayerError * _Nonnull)invalidUrl SWIFT_WARN_UNUSED_RESULT;
/// Some error occurred when creating internal player
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull creatingPlayer;)
+ (SambaPlayerError * _Nonnull)creatingPlayer SWIFT_WARN_UNUSED_RESULT;
/// Trying to play a secure media on a rooted device
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull rootedDevice;)
+ (SambaPlayerError * _Nonnull)rootedDevice SWIFT_WARN_UNUSED_RESULT;
/// Trying to access an internal player instance that’s not loaded yet
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull playerNotLoaded;)
+ (SambaPlayerError * _Nonnull)playerNotLoaded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull drmNotPermition;)
+ (SambaPlayerError * _Nonnull)drmNotPermition SWIFT_WARN_UNUSED_RESULT;
/// Unknown error
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull unknown;)
+ (SambaPlayerError * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
/// The error code
@property (nonatomic, readonly) NSInteger code;
/// Whether error should destroy player or not
@property (nonatomic) enum SambaPlayerErrorCriticality criticality;
/// The error message
@property (nonatomic, copy) NSString * _Nonnull message;
/// The error cause
@property (nonatomic, strong) NSError * _Nullable cause;
/// Creates a new error entity
/// \param code The error code
///
/// \param message The error message
///
/// \param critical Whether error should destroy player or not
///
/// \param cause The error cause
///
- (nonnull instancetype)init:(NSInteger)code :(NSString * _Nonnull)message :(enum SambaPlayerErrorCriticality)criticality :(NSError * _Nullable)cause OBJC_DESIGNATED_INITIALIZER;
/// Retrieves the error description
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Defines the criticality of an error, whether to destroy the player or not.
typedef SWIFT_ENUM(NSInteger, SambaPlayerErrorCriticality, closed) {
  SambaPlayerErrorCriticalityMinor = 0,
  SambaPlayerErrorCriticalityInfo = 1,
  SambaPlayerErrorCriticalityRecoverable = 2,
  SambaPlayerErrorCriticalityCritical = 3,
};


SWIFT_CLASS("_TtC11SambaPlayer13SambaSubtitle")
@interface SambaSubtitle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SambaPlayer10SambaTrack")
@interface SambaTrack : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import GoogleCast;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SambaPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC11SambaPlayer12DownloadData")
@interface DownloadData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SambaPlayer13DownloadState")
@interface DownloadState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Represents a DRM validation request
SWIFT_CLASS("_TtC11SambaPlayer10DrmRequest")
@interface DrmRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface NSNotification (SWIFT_EXTENSION(SambaPlayer))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull SambaDownloadStateChanged;)
+ (NSNotificationName _Nonnull)SambaDownloadStateChanged SWIFT_WARN_UNUSED_RESULT;
@end

@class SambaMediaRequest;
@class SambaMedia;
@class NSURLResponse;

/// Manages media data requests
SWIFT_CLASS("_TtC11SambaPlayer8SambaApi")
@interface SambaApi : NSObject
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Requests and decodes a Base64 media data from the Samba Player API
/// \param request The request to the API
///
/// \param onComplete The callback when the request completes that brings the media object to use with the player
///
- (void)requestMedia:(SambaMediaRequest * _Nonnull)request onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete;
- (void)prepareOfflineMediaWithMedia:(SambaMedia * _Nonnull)media onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete onError:(void (^ _Nonnull)(NSError * _Nullable, NSURLResponse * _Nullable))onError;
/// Requests and decodes a Base64 media data from the Samba Player API
/// \param request The request to the API
///
/// \param onComplete The callback when the request completes that brings the media object to use with the player
///
/// \param onError The callback for any error during the API request
///
- (void)requestMedia:(SambaMediaRequest * _Nonnull)request onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete onError:(void (^ _Nullable)(NSError * _Nullable, NSURLResponse * _Nullable))onError;
@end

@protocol SambaCastDelegate;
@class SambaCastButton;
enum SambaCastCompletionType : NSInteger;

SWIFT_CLASS("_TtC11SambaPlayer9SambaCast")
@interface SambaCast : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SambaCast * _Nonnull sharedInstance;)
+ (SambaCast * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(SambaCast * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)subscribeWithDelegate:(id <SambaCastDelegate> _Nonnull)delegate;
- (void)unSubscribeWithDelegate:(id <SambaCastDelegate> _Nonnull)delegate;
- (void)config;
- (BOOL)isCasting SWIFT_WARN_UNUSED_RESULT;
- (void)presentCastInstructionWith:(SambaCastButton * _Nonnull)button;
- (void)stopCasting;
- (void)loadMediaWith:(SambaMedia * _Nonnull)media currentTime:(long)currentTime captionTheme:(NSString * _Nullable)captionTheme completion:(void (^ _Nonnull)(enum SambaCastCompletionType, NSError * _Nullable))completion;
@end


@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKLoggerDelegate>
- (void)logMessage:(NSString * _Nonnull)message fromFunction:(NSString * _Nonnull)function;
@end

@class GCKUIImageHints;
@class GCKMediaMetadata;
@class GCKImage;

@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKUIImagePicker>
- (GCKImage * _Nullable)getImageWithHints:(GCKUIImageHints * _Nonnull)imageHints fromMetadata:(GCKMediaMetadata * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
@end



@class GCKSessionManager;
@class GCKSession;

@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKSessionManagerListener>
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didStartSession:(GCKSession * _Nonnull)session;
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didResumeSession:(GCKSession * _Nonnull)session;
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didEndSession:(GCKSession * _Nonnull)session withError:(NSError * _Nullable)error;
@end

@class NSCoder;

SWIFT_CLASS("_TtC11SambaPlayer15SambaCastButton")
@interface SambaCastButton : GCKUICastButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SambaCastCompletionType, closed) {
  SambaCastCompletionTypeLoaded = 0,
  SambaCastCompletionTypeResumed = 1,
  SambaCastCompletionTypeError = 2,
};


SWIFT_PROTOCOL("_TtP11SambaPlayer17SambaCastDelegate_")
@protocol SambaCastDelegate
@optional
- (void)onCastConnected;
- (void)onCastResumed;
- (void)onCastDisconnected;
- (void)onCastPlay;
- (void)onCastPause;
- (void)onCastProgressWithPosition:(long)position duration:(long)duration;
- (void)onCastFinish;
@end

@class SambaDownloadRequest;

SWIFT_CLASS("_TtC11SambaPlayer20SambaDownloadManager")
@interface SambaDownloadManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SambaDownloadManager * _Nonnull sharedInstance;)
+ (SambaDownloadManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(SambaDownloadManager * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)config;
- (void)configWithMaximumDurationTimeForLicensesOfProtectedContentInMinutes:(NSInteger)time;
- (void)prepareDownloadWith:(SambaDownloadRequest * _Nonnull)request successCallback:(void (^ _Nonnull)(SambaDownloadRequest * _Nonnull))successCallback errorCallback:(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nonnull))errorCallback;
- (void)performDownloadWith:(SambaDownloadRequest * _Nonnull)request;
- (BOOL)isDownloading:(NSString * _Nonnull)mediaID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDownloaded:(NSString * _Nonnull)mediaID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPaused:(NSString * _Nonnull)mediaId SWIFT_WARN_UNUSED_RESULT;
- (void)cancelDownloadFor:(NSString * _Nonnull)mediaId;
- (void)deleteMediaFor:(NSString * _Nonnull)mediaId;
- (void)deleteAllMedias;
- (void)cancelAllDownloads;
- (void)pauseDownloadFor:(NSString * _Nonnull)mediaId;
- (void)resumeDownloadFor:(NSString * _Nonnull)mediaId;
- (void)pauseAllDownloads;
- (void)resumeAllDownloads;
- (SambaMedia * _Nullable)getDownloadedMediaFor:(NSString * _Nonnull)mediaId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SambaMedia *> * _Nonnull)getAllDownloadedMedia SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11SambaPlayer20SambaDownloadRequest")
@interface SambaDownloadRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Samba Player API environment list
typedef SWIFT_ENUM(NSInteger, SambaEnvironment, closed) {
/// Production environment
  SambaEnvironmentProd = 0,
/// Staging environment
  SambaEnvironmentStaging = 1,
/// Development/Testing environment
  SambaEnvironmentTest = 2,
/// Local environment
  SambaEnvironmentLocal = 3,
};

@class UIImage;

/// Data entity representing a media
/// If <code>outputs</code> field is nil, <code>url</code> field will be used instead.
SWIFT_CLASS("_TtC11SambaPlayer10SambaMedia")
@interface SambaMedia : NSObject
/// Description of the media (returns media’s title when empty)
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Basic initializer
/// \param url URL of the media
///
/// \param title Media’s title
///
/// \param thumb URL of the thumb
///
- (nonnull instancetype)init:(NSString * _Nonnull)url title:(NSString * _Nullable)title thumb:(UIImage * _Nullable)thumb OBJC_DESIGNATED_INITIALIZER;
/// Clone initializer
/// \param media Another media object to create a clone
///
- (nonnull instancetype)initWithMedia:(SambaMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
@end


/// Caption entity
SWIFT_CLASS("_TtC11SambaPlayer17SambaMediaCaption")
@interface SambaMediaCaption : NSObject
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url label:(NSString * _Nonnull)label language:(NSString * _Nonnull)language cc:(BOOL)cc isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Configuration for captions
SWIFT_CLASS("_TtC11SambaPlayer24SambaMediaCaptionsConfig")
@interface SambaMediaCaptionsConfig : NSObject
- (nonnull instancetype)initWithColor:(NSUInteger)color size:(NSInteger)size language:(NSString * _Nullable)language OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     Internal extension of the media entity for player/plugins config purposes.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC11SambaPlayer16SambaMediaConfig")
@interface SambaMediaConfig : SambaMedia
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Clone initializer
/// \param media The ID of the media
///
- (nonnull instancetype)initWithMedia:(SambaMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)url title:(NSString * _Nullable)title thumb:(UIImage * _Nullable)thumb SWIFT_UNAVAILABLE;
@end


/// Output entity
SWIFT_CLASS("_TtC11SambaPlayer16SambaMediaOutput")
@interface SambaMediaOutput : NSObject
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url label:(NSString * _Nonnull)label isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Data entity that represents a media request to the Samba Player API
SWIFT_CLASS("_TtC11SambaPlayer17SambaMediaRequest")
@interface SambaMediaRequest : NSObject
/// Live initializer (by URL)
/// \param projectHash The project hash the media belongs to
///
/// \param streamUrl URL for live content
///
/// \param backupUrls Optional URL list for backup/fallback purposes
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamUrl:(NSString * _Nonnull)streamUrl backupUrls:(NSArray<NSString *> * _Nullable)backupUrls OBJC_DESIGNATED_INITIALIZER;
/// Convenience constructor, please refer to its original version.
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamUrl:(NSString * _Nonnull)streamUrl;
/// Live initializer (by URL + audio option)
/// \param projectHash The project hash the media belongs to
///
/// \param isLiveAudio Whether the media is both live and audio
///
/// \param streamUrl URL for live content
///
/// \param backupUrls Optional URL list for backup/fallback purposes
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash isLiveAudio:(BOOL)isLiveAudio streamUrl:(NSString * _Nonnull)streamUrl backupUrls:(NSArray<NSString *> * _Nullable)backupUrls OBJC_DESIGNATED_INITIALIZER;
/// Live initializer (by stream name)
/// \param projectHash The project hash the media belongs to
///
/// \param streamName Name of the media stream for live content
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamName:(NSString * _Nonnull)streamName OBJC_DESIGNATED_INITIALIZER;
/// VoD initializer
/// \param projectHash The project hash the media belongs to
///
/// \param mediaId The ID of the media
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash mediaId:(NSString * _Nonnull)mediaId OBJC_DESIGNATED_INITIALIZER;
/// Live initializer
/// \param projectHash The project hash the media belongs to
///
/// \param liveChannelId The ID of the live channel
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash liveChannelId:(NSString * _Nonnull)liveChannelId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol SambaPlayerDelegate;
@class UIView;
@class SambaPlayerError;
enum SambaPlayerControls : NSInteger;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

/// Responsible for managing media playback
SWIFT_CLASS("_TtC11SambaPlayer11SambaPlayer")
@interface SambaPlayer : UIViewController <SambaCastDelegate>
- (void)onCastConnected;
- (void)onCastResumed;
- (void)onCastDisconnected;
- (void)onCastProgressWithPosition:(long)position duration:(long)duration;
/// Stores the delegated methods for the player events
@property (nonatomic, strong) id <SambaPlayerDelegate> _Nonnull delegate;
- (void)unsubscribeDelegate:(id <SambaPlayerDelegate> _Nonnull)delegate;
/// Current media time
@property (nonatomic, readonly) float currentTime;
/// Current media duration
@property (nonatomic, readonly) float duration;
/// Current media
@property (nonatomic, strong) SambaMedia * _Nonnull media;
/// Whether media is playing or not
@property (nonatomic, readonly) BOOL isPlaying;
/// Whether controls should be visible or not
@property (nonatomic) BOOL controlsVisible;
/// Whether player shoud be fullscreen or not
@property (nonatomic) BOOL fullscreen;
/// Sets playback speed (values can vary from -1 to 2)
@property (nonatomic) float rate;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer
/// \param parentViewController The view-controller in which the player view-controller and view should be embedded
///
- (nonnull instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController;
/// Convenience initializer
/// \param parentViewController The view-controller in which the player view-controller should be embedded
///
/// \param parentView The view in which the player view should be embedded
///
- (nonnull instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController andParentView:(UIView * _Nonnull)parentView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Plays the media
- (void)play;
/// Pauses the media
- (void)pause;
/// Stops the media returning it to its initial time
- (void)stop;
/// Moves the media to a given time
/// \code
/// player.seek(20)
///
/// \endcode\param pos Time in seconds
///
- (void)seek:(float)pos;
/// Changes the current output
/// \code
/// player.switchOutput(1)
///
/// \endcode\param value Index of the output, -1 for auto switch.
///
- (void)switchOutput:(NSInteger)value;
/// Changes the current caption
/// \code
/// player.changeCaption(1)
///
/// \endcode\param value Index of the caption
///
- (void)changeCaption:(NSInteger)value;
/// Destroys the player instance
/// \code
/// player.destroy()
///
/// \endcode\param error (optional) Error type to show
///
- (void)destroyWithError:(SambaPlayerError * _Nullable)error;
- (void)hide:(enum SambaPlayerControls)control;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, SambaPlayerControls, closed) {
  SambaPlayerControlsPlay = 0,
  SambaPlayerControlsPlayLarge = 1,
  SambaPlayerControlsFullscreen = 2,
  SambaPlayerControlsSeekbar = 3,
  SambaPlayerControlsTopBar = 4,
  SambaPlayerControlsBottomBar = 5,
  SambaPlayerControlsTime = 6,
  SambaPlayerControlsMenu = 7,
  SambaPlayerControlsLiveIcon = 8,
};


/// Listens to player events
SWIFT_PROTOCOL("_TtP11SambaPlayer19SambaPlayerDelegate_")
@protocol SambaPlayerDelegate
@optional
/// Fired up when player is loaded
- (void)onLoad;
/// Fired up when player is started
- (void)onStart;
/// Fired up when player is resumed ( from paused to play )
- (void)onResume;
/// Fired up when player is paused
- (void)onPause;
/// Fired up when player is playing ( fired each second of playing )
- (void)onProgress;
/// Fired up when player is finished
- (void)onFinish;
/// Fired up when player is reset
- (void)onReset;
/// Fired up when player is destroyed
- (void)onDestroy;
/// Fired up when some error occurs
- (void)onError:(SambaPlayerError * _Nonnull)error;
@end

enum SambaPlayerErrorCriticality : NSInteger;
@class NSError;

/// Player error list
SWIFT_CLASS("_TtC11SambaPlayer16SambaPlayerError")
@interface SambaPlayerError : NSObject
/// URL format is invalid
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull invalidUrl;)
+ (SambaPlayerError * _Nonnull)invalidUrl SWIFT_WARN_UNUSED_RESULT;
/// Some error occurred when creating internal player
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull creatingPlayer;)
+ (SambaPlayerError * _Nonnull)creatingPlayer SWIFT_WARN_UNUSED_RESULT;
/// Trying to play a secure media on a rooted device
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull rootedDevice;)
+ (SambaPlayerError * _Nonnull)rootedDevice SWIFT_WARN_UNUSED_RESULT;
/// Trying to access an internal player instance that’s not loaded yet
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull playerNotLoaded;)
+ (SambaPlayerError * _Nonnull)playerNotLoaded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull drmNotPermition;)
+ (SambaPlayerError * _Nonnull)drmNotPermition SWIFT_WARN_UNUSED_RESULT;
/// Unknown error
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull unknown;)
+ (SambaPlayerError * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
/// The error code
@property (nonatomic, readonly) NSInteger code;
/// Whether error should destroy player or not
@property (nonatomic) enum SambaPlayerErrorCriticality criticality;
/// The error message
@property (nonatomic, copy) NSString * _Nonnull message;
/// The error cause
@property (nonatomic, strong) NSError * _Nullable cause;
/// Creates a new error entity
/// \param code The error code
///
/// \param message The error message
///
/// \param critical Whether error should destroy player or not
///
/// \param cause The error cause
///
- (nonnull instancetype)init:(NSInteger)code :(NSString * _Nonnull)message :(enum SambaPlayerErrorCriticality)criticality :(NSError * _Nullable)cause OBJC_DESIGNATED_INITIALIZER;
/// Retrieves the error description
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Defines the criticality of an error, whether to destroy the player or not.
typedef SWIFT_ENUM(NSInteger, SambaPlayerErrorCriticality, closed) {
  SambaPlayerErrorCriticalityMinor = 0,
  SambaPlayerErrorCriticalityInfo = 1,
  SambaPlayerErrorCriticalityRecoverable = 2,
  SambaPlayerErrorCriticalityCritical = 3,
};


SWIFT_CLASS("_TtC11SambaPlayer13SambaSubtitle")
@interface SambaSubtitle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SambaPlayer10SambaTrack")
@interface SambaTrack : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.1.3 effective-4.2 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import GoogleCast;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SambaPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


SWIFT_CLASS("_TtC11SambaPlayer12DownloadData")
@interface DownloadData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SambaPlayer13DownloadState")
@interface DownloadState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Represents a DRM validation request
SWIFT_CLASS("_TtC11SambaPlayer10DrmRequest")
@interface DrmRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface NSNotification (SWIFT_EXTENSION(SambaPlayer))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSNotificationName _Nonnull SambaDownloadStateChanged;)
+ (NSNotificationName _Nonnull)SambaDownloadStateChanged SWIFT_WARN_UNUSED_RESULT;
@end

@class SambaMediaRequest;
@class SambaMedia;
@class NSURLResponse;

/// Manages media data requests
SWIFT_CLASS("_TtC11SambaPlayer8SambaApi")
@interface SambaApi : NSObject
/// Default constructor
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Requests and decodes a Base64 media data from the Samba Player API
/// \param request The request to the API
///
/// \param onComplete The callback when the request completes that brings the media object to use with the player
///
- (void)requestMedia:(SambaMediaRequest * _Nonnull)request onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete;
- (void)prepareOfflineMediaWithMedia:(SambaMedia * _Nonnull)media onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete onError:(void (^ _Nonnull)(NSError * _Nullable, NSURLResponse * _Nullable))onError;
/// Requests and decodes a Base64 media data from the Samba Player API
/// \param request The request to the API
///
/// \param onComplete The callback when the request completes that brings the media object to use with the player
///
/// \param onError The callback for any error during the API request
///
- (void)requestMedia:(SambaMediaRequest * _Nonnull)request onComplete:(void (^ _Nonnull)(SambaMedia * _Nullable))onComplete onError:(void (^ _Nullable)(NSError * _Nullable, NSURLResponse * _Nullable))onError;
@end

@protocol SambaCastDelegate;
@class SambaCastButton;
enum SambaCastCompletionType : NSInteger;

SWIFT_CLASS("_TtC11SambaPlayer9SambaCast")
@interface SambaCast : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SambaCast * _Nonnull sharedInstance;)
+ (SambaCast * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(SambaCast * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)subscribeWithDelegate:(id <SambaCastDelegate> _Nonnull)delegate;
- (void)unSubscribeWithDelegate:(id <SambaCastDelegate> _Nonnull)delegate;
- (void)config;
- (BOOL)isCasting SWIFT_WARN_UNUSED_RESULT;
- (void)presentCastInstructionWith:(SambaCastButton * _Nonnull)button;
- (void)stopCasting;
- (void)loadMediaWith:(SambaMedia * _Nonnull)media currentTime:(long)currentTime captionTheme:(NSString * _Nullable)captionTheme completion:(void (^ _Nonnull)(enum SambaCastCompletionType, NSError * _Nullable))completion;
@end


@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKLoggerDelegate>
- (void)logMessage:(NSString * _Nonnull)message fromFunction:(NSString * _Nonnull)function;
@end

@class GCKUIImageHints;
@class GCKMediaMetadata;
@class GCKImage;

@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKUIImagePicker>
- (GCKImage * _Nullable)getImageWithHints:(GCKUIImageHints * _Nonnull)imageHints fromMetadata:(GCKMediaMetadata * _Nonnull)metadata SWIFT_WARN_UNUSED_RESULT;
@end



@class GCKSessionManager;
@class GCKSession;

@interface SambaCast (SWIFT_EXTENSION(SambaPlayer)) <GCKSessionManagerListener>
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didStartSession:(GCKSession * _Nonnull)session;
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didResumeSession:(GCKSession * _Nonnull)session;
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didEndSession:(GCKSession * _Nonnull)session withError:(NSError * _Nullable)error;
@end

@class NSCoder;

SWIFT_CLASS("_TtC11SambaPlayer15SambaCastButton")
@interface SambaCastButton : GCKUICastButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)decoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SambaCastCompletionType, closed) {
  SambaCastCompletionTypeLoaded = 0,
  SambaCastCompletionTypeResumed = 1,
  SambaCastCompletionTypeError = 2,
};


SWIFT_PROTOCOL("_TtP11SambaPlayer17SambaCastDelegate_")
@protocol SambaCastDelegate
@optional
- (void)onCastConnected;
- (void)onCastResumed;
- (void)onCastDisconnected;
- (void)onCastPlay;
- (void)onCastPause;
- (void)onCastProgressWithPosition:(long)position duration:(long)duration;
- (void)onCastFinish;
@end

@class SambaDownloadRequest;

SWIFT_CLASS("_TtC11SambaPlayer20SambaDownloadManager")
@interface SambaDownloadManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SambaDownloadManager * _Nonnull sharedInstance;)
+ (SambaDownloadManager * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
+ (void)setSharedInstance:(SambaDownloadManager * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (void)config;
- (void)configWithMaximumDurationTimeForLicensesOfProtectedContentInMinutes:(NSInteger)time;
- (void)prepareDownloadWith:(SambaDownloadRequest * _Nonnull)request successCallback:(void (^ _Nonnull)(SambaDownloadRequest * _Nonnull))successCallback errorCallback:(void (^ _Nonnull)(NSError * _Nullable, NSString * _Nonnull))errorCallback;
- (void)performDownloadWith:(SambaDownloadRequest * _Nonnull)request;
- (BOOL)isDownloading:(NSString * _Nonnull)mediaID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDownloaded:(NSString * _Nonnull)mediaID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isPaused:(NSString * _Nonnull)mediaId SWIFT_WARN_UNUSED_RESULT;
- (void)cancelDownloadFor:(NSString * _Nonnull)mediaId;
- (void)deleteMediaFor:(NSString * _Nonnull)mediaId;
- (void)deleteAllMedias;
- (void)cancelAllDownloads;
- (void)pauseDownloadFor:(NSString * _Nonnull)mediaId;
- (void)resumeDownloadFor:(NSString * _Nonnull)mediaId;
- (void)pauseAllDownloads;
- (void)resumeAllDownloads;
- (SambaMedia * _Nullable)getDownloadedMediaFor:(NSString * _Nonnull)mediaId SWIFT_WARN_UNUSED_RESULT;
- (NSArray<SambaMedia *> * _Nonnull)getAllDownloadedMedia SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11SambaPlayer20SambaDownloadRequest")
@interface SambaDownloadRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Samba Player API environment list
typedef SWIFT_ENUM(NSInteger, SambaEnvironment, closed) {
/// Production environment
  SambaEnvironmentProd = 0,
/// Staging environment
  SambaEnvironmentStaging = 1,
/// Development/Testing environment
  SambaEnvironmentTest = 2,
/// Local environment
  SambaEnvironmentLocal = 3,
};

@class UIImage;

/// Data entity representing a media
/// If <code>outputs</code> field is nil, <code>url</code> field will be used instead.
SWIFT_CLASS("_TtC11SambaPlayer10SambaMedia")
@interface SambaMedia : NSObject
/// Description of the media (returns media’s title when empty)
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Basic initializer
/// \param url URL of the media
///
/// \param title Media’s title
///
/// \param thumb URL of the thumb
///
- (nonnull instancetype)init:(NSString * _Nonnull)url title:(NSString * _Nullable)title thumb:(UIImage * _Nullable)thumb OBJC_DESIGNATED_INITIALIZER;
/// Clone initializer
/// \param media Another media object to create a clone
///
- (nonnull instancetype)initWithMedia:(SambaMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
@end


/// Caption entity
SWIFT_CLASS("_TtC11SambaPlayer17SambaMediaCaption")
@interface SambaMediaCaption : NSObject
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url label:(NSString * _Nonnull)label language:(NSString * _Nonnull)language cc:(BOOL)cc isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Configuration for captions
SWIFT_CLASS("_TtC11SambaPlayer24SambaMediaCaptionsConfig")
@interface SambaMediaCaptionsConfig : NSObject
- (nonnull instancetype)initWithColor:(NSUInteger)color size:(NSInteger)size language:(NSString * _Nullable)language OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// <ul>
///   <li>
///     Internal extension of the media entity for player/plugins config purposes.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC11SambaPlayer16SambaMediaConfig")
@interface SambaMediaConfig : SambaMedia
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Clone initializer
/// \param media The ID of the media
///
- (nonnull instancetype)initWithMedia:(SambaMedia * _Nonnull)media OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)url title:(NSString * _Nullable)title thumb:(UIImage * _Nullable)thumb SWIFT_UNAVAILABLE;
@end


/// Output entity
SWIFT_CLASS("_TtC11SambaPlayer16SambaMediaOutput")
@interface SambaMediaOutput : NSObject
- (nonnull instancetype)initWithUrl:(NSString * _Nonnull)url label:(NSString * _Nonnull)label isDefault:(BOOL)isDefault OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Data entity that represents a media request to the Samba Player API
SWIFT_CLASS("_TtC11SambaPlayer17SambaMediaRequest")
@interface SambaMediaRequest : NSObject
/// Live initializer (by URL)
/// \param projectHash The project hash the media belongs to
///
/// \param streamUrl URL for live content
///
/// \param backupUrls Optional URL list for backup/fallback purposes
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamUrl:(NSString * _Nonnull)streamUrl backupUrls:(NSArray<NSString *> * _Nullable)backupUrls OBJC_DESIGNATED_INITIALIZER;
/// Convenience constructor, please refer to its original version.
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamUrl:(NSString * _Nonnull)streamUrl;
/// Live initializer (by URL + audio option)
/// \param projectHash The project hash the media belongs to
///
/// \param isLiveAudio Whether the media is both live and audio
///
/// \param streamUrl URL for live content
///
/// \param backupUrls Optional URL list for backup/fallback purposes
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash isLiveAudio:(BOOL)isLiveAudio streamUrl:(NSString * _Nonnull)streamUrl backupUrls:(NSArray<NSString *> * _Nullable)backupUrls OBJC_DESIGNATED_INITIALIZER;
/// Live initializer (by stream name)
/// \param projectHash The project hash the media belongs to
///
/// \param streamName Name of the media stream for live content
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash streamName:(NSString * _Nonnull)streamName OBJC_DESIGNATED_INITIALIZER;
/// VoD initializer
/// \param projectHash The project hash the media belongs to
///
/// \param mediaId The ID of the media
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash mediaId:(NSString * _Nonnull)mediaId OBJC_DESIGNATED_INITIALIZER;
/// Live initializer
/// \param projectHash The project hash the media belongs to
///
/// \param liveChannelId The ID of the live channel
///
- (nonnull instancetype)initWithProjectHash:(NSString * _Nonnull)projectHash liveChannelId:(NSString * _Nonnull)liveChannelId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

@protocol SambaPlayerDelegate;
@class UIView;
@class SambaPlayerError;
enum SambaPlayerControls : NSInteger;
@protocol UIViewControllerTransitionCoordinator;
@class NSBundle;

/// Responsible for managing media playback
SWIFT_CLASS("_TtC11SambaPlayer11SambaPlayer")
@interface SambaPlayer : UIViewController <SambaCastDelegate>
- (void)onCastConnected;
- (void)onCastResumed;
- (void)onCastDisconnected;
- (void)onCastProgressWithPosition:(long)position duration:(long)duration;
/// Stores the delegated methods for the player events
@property (nonatomic, strong) id <SambaPlayerDelegate> _Nonnull delegate;
- (void)unsubscribeDelegate:(id <SambaPlayerDelegate> _Nonnull)delegate;
/// Current media time
@property (nonatomic, readonly) float currentTime;
/// Current media duration
@property (nonatomic, readonly) float duration;
/// Current media
@property (nonatomic, strong) SambaMedia * _Nonnull media;
/// Whether media is playing or not
@property (nonatomic, readonly) BOOL isPlaying;
/// Whether controls should be visible or not
@property (nonatomic) BOOL controlsVisible;
/// Whether player shoud be fullscreen or not
@property (nonatomic) BOOL fullscreen;
/// Sets playback speed (values can vary from -1 to 2)
@property (nonatomic) float rate;
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer
/// \param parentViewController The view-controller in which the player view-controller and view should be embedded
///
- (nonnull instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController;
/// Convenience initializer
/// \param parentViewController The view-controller in which the player view-controller should be embedded
///
/// \param parentView The view in which the player view should be embedded
///
- (nonnull instancetype)initWithParentViewController:(UIViewController * _Nonnull)parentViewController andParentView:(UIView * _Nonnull)parentView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Plays the media
- (void)play;
/// Pauses the media
- (void)pause;
/// Stops the media returning it to its initial time
- (void)stop;
/// Moves the media to a given time
/// \code
/// player.seek(20)
///
/// \endcode\param pos Time in seconds
///
- (void)seek:(float)pos;
/// Changes the current output
/// \code
/// player.switchOutput(1)
///
/// \endcode\param value Index of the output, -1 for auto switch.
///
- (void)switchOutput:(NSInteger)value;
/// Changes the current caption
/// \code
/// player.changeCaption(1)
///
/// \endcode\param value Index of the caption
///
- (void)changeCaption:(NSInteger)value;
/// Destroys the player instance
/// \code
/// player.destroy()
///
/// \endcode\param error (optional) Error type to show
///
- (void)destroyWithError:(SambaPlayerError * _Nullable)error;
- (void)hide:(enum SambaPlayerControls)control;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, SambaPlayerControls, closed) {
  SambaPlayerControlsPlay = 0,
  SambaPlayerControlsPlayLarge = 1,
  SambaPlayerControlsFullscreen = 2,
  SambaPlayerControlsSeekbar = 3,
  SambaPlayerControlsTopBar = 4,
  SambaPlayerControlsBottomBar = 5,
  SambaPlayerControlsTime = 6,
  SambaPlayerControlsMenu = 7,
  SambaPlayerControlsLiveIcon = 8,
};


/// Listens to player events
SWIFT_PROTOCOL("_TtP11SambaPlayer19SambaPlayerDelegate_")
@protocol SambaPlayerDelegate
@optional
/// Fired up when player is loaded
- (void)onLoad;
/// Fired up when player is started
- (void)onStart;
/// Fired up when player is resumed ( from paused to play )
- (void)onResume;
/// Fired up when player is paused
- (void)onPause;
/// Fired up when player is playing ( fired each second of playing )
- (void)onProgress;
/// Fired up when player is finished
- (void)onFinish;
/// Fired up when player is reset
- (void)onReset;
/// Fired up when player is destroyed
- (void)onDestroy;
/// Fired up when some error occurs
- (void)onError:(SambaPlayerError * _Nonnull)error;
@end

enum SambaPlayerErrorCriticality : NSInteger;
@class NSError;

/// Player error list
SWIFT_CLASS("_TtC11SambaPlayer16SambaPlayerError")
@interface SambaPlayerError : NSObject
/// URL format is invalid
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull invalidUrl;)
+ (SambaPlayerError * _Nonnull)invalidUrl SWIFT_WARN_UNUSED_RESULT;
/// Some error occurred when creating internal player
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull creatingPlayer;)
+ (SambaPlayerError * _Nonnull)creatingPlayer SWIFT_WARN_UNUSED_RESULT;
/// Trying to play a secure media on a rooted device
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull rootedDevice;)
+ (SambaPlayerError * _Nonnull)rootedDevice SWIFT_WARN_UNUSED_RESULT;
/// Trying to access an internal player instance that’s not loaded yet
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull playerNotLoaded;)
+ (SambaPlayerError * _Nonnull)playerNotLoaded SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull drmNotPermition;)
+ (SambaPlayerError * _Nonnull)drmNotPermition SWIFT_WARN_UNUSED_RESULT;
/// Unknown error
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SambaPlayerError * _Nonnull unknown;)
+ (SambaPlayerError * _Nonnull)unknown SWIFT_WARN_UNUSED_RESULT;
/// The error code
@property (nonatomic, readonly) NSInteger code;
/// Whether error should destroy player or not
@property (nonatomic) enum SambaPlayerErrorCriticality criticality;
/// The error message
@property (nonatomic, copy) NSString * _Nonnull message;
/// The error cause
@property (nonatomic, strong) NSError * _Nullable cause;
/// Creates a new error entity
/// \param code The error code
///
/// \param message The error message
///
/// \param critical Whether error should destroy player or not
///
/// \param cause The error cause
///
- (nonnull instancetype)init:(NSInteger)code :(NSString * _Nonnull)message :(enum SambaPlayerErrorCriticality)criticality :(NSError * _Nullable)cause OBJC_DESIGNATED_INITIALIZER;
/// Retrieves the error description
@property (nonatomic, readonly, copy) NSString * _Nonnull localizedDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Defines the criticality of an error, whether to destroy the player or not.
typedef SWIFT_ENUM(NSInteger, SambaPlayerErrorCriticality, closed) {
  SambaPlayerErrorCriticalityMinor = 0,
  SambaPlayerErrorCriticalityInfo = 1,
  SambaPlayerErrorCriticalityRecoverable = 2,
  SambaPlayerErrorCriticalityCritical = 3,
};


SWIFT_CLASS("_TtC11SambaPlayer13SambaSubtitle")
@interface SambaSubtitle : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SambaPlayer10SambaTrack")
@interface SambaTrack : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif

#endif
